{"version":3,"sources":["task.png","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","list","setList","error","setError","useEffect","fetchLists","rem","localStorage","getItem","listUpdated","JSON","parse","arr","length","reverse","className","Form","Control","placeholder","onChange","e","target","value","maxLength","Button","onClick","obj","trim","key","moment","unix","saveArr","setItem","stringify","window","location","reload","class","map","item","index","format","id","updatedArr","filter","deleteItem","src","img","alt","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d4cb1f65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/task.18a72958.png\";","import React,{useState,useEffect} from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport { Button,Form } from 'react-bootstrap';\nimport img from './task.png';\n\nfunction App() {\n  const [text,setText]=useState('');\n  const [list,setList]=useState([]);\n  const [error,setError]=useState(false);\n\n  useEffect(() => {\n    fetchLists();\n   }, [])\n\n   const fetchLists=()=>{\n     const rem = localStorage.getItem('todo');\n     var listUpdated = JSON.parse(rem);\n     var arr = listUpdated && listUpdated.length !== 0 ? listUpdated.reverse() : [];\n     setList(arr);\n   }\n\n   const deleteItem=(id)=>{\n    var arr = JSON.parse(localStorage.getItem('todo')) || [];\n    var updatedArr = arr.filter(item=> item.key !== id);\n    localStorage.setItem('todo',JSON.stringify(updatedArr));\n    window.location.reload(false);\n  }\n\n  const saveList=()=>{\n    if(text.length!==0){\n      var arr = JSON.parse(localStorage.getItem('todo')) || [];\n      const obj = {\n        text: text.trim(),\n        key: moment().unix(),\n      }\n      var saveArr = [...arr,obj];\n      localStorage.setItem('todo',JSON.stringify(saveArr));\n      window.location.reload(false);\n    }\n    else {\n      setError(true)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"web\">\n      <div className=\"p-4 fixed-top bg\">\n       <Form className=\"d-flex w-100 container\">\n          <Form.Control\n            className=\"search w-90\"\n            placeholder=\"Add your tasks here...\"\n            onChange={e=>{\n              setText(e.target.value);\n              setError(false)}}\n            maxLength=\"30\"/>\n          <Button onClick={saveList} className=\"btn\">\n             Submit\n          </Button>\n        </Form>\n      </div>\n      <div className=\"container list\">\n      {error?<div class=\"text-center font-weight-bold text-danger my-2\"><span>Please add a task first.</span></div> : null}\n        {list.length !== 0 ?\n          list.map((item,index)=>\n          <div key={item.key} className=\"d-flex justify-content-between align-items-center flex-wrap listItem p-3\">\n            <h5 className=\"font-weight-bold\">{item.text}</h5>\n            <div className=\"d-flex justify-content-end\">\n              <span>{moment.unix(item.key).format(\"DD MMM, YYYY\")}</span>\n              <span className=\"mx-3\">{moment.unix(item.key).format(\"hh:mm A\")}</span>\n              <span onClick={()=> deleteItem(item.key)}  className=\"mr-4\">Delete</span>\n            </div>\n          </div>\n      ) :\n      <div className=\"d-flex flex-column justify-content-center align-items-center\">\n        <img src={img} className=\"w-25 h-25 mt-5\" alt=\"No tasks found.\"/>\n      </div>}\n      {list.length!==0 ?<h6 className=\"fixed-bottom p-5\">#{list.length} task(s) pending</h6>: null}\n     </div>\n    </div>\n    <div className=\"list justify-content-center align-items-center mob\">\n      <p className=\"font-weight-bold \">This site is available for desktop view only.</p>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}